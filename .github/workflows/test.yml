# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Tests

on:
  push:
    branches:
      - main
      # Use this to make a release out of phase with main
      - "release/[0-9]+"
      - "release/[0-9]+.[0-9]+"
  pull_request:
    branches:
      - main

jobs:
  validate:
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1

    runs-on: ubuntu-latest
    outputs:
      version: ${{ needs.release.outputs.version }}
    steps:
    - uses: actions/checkout@v3
      name: Download source

    - name: Check if release PR.
      uses: edgedb/action-release/validate-pr@master
      id: release
      with:
        github_token: ${{ secrets.RELEASE_BOT_GITHUB_TOKEN }}
        missing_version_ok: yes
        version_file: shmutils/about.py
        version_line_pattern: |
          __version__\s*=\s*(?:['"])([[:PEP440:]])(?:['"])

  test:
    runs-on: ${{ matrix.os }}
    if: needs.validate.outputs.version == 0
    needs: validate
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10']
        os: [ubuntu-latest, macos-latest]
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
    steps:
    - uses: actions/checkout@v3
      name: Download source

    - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Python Dependencies
      run: |
        pip install -r requirements.txt -r test-requirements.txt
        pip install .[test]
    - name: Test with pytest
      run: |
        mkdir -p test-run/junit
        (cd test-run && python -m pytest -svvv ../tests/ --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml)

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: always() # always run even if the previous step fails
      with:
        report_paths: 'test-run/junit/test-results-*.xml'
    - name: Build coverage file
      run: |
        pip install pytest-cov
        pytest --cache-clear --cov=shmutils tests/ > pytest-coverage.txt
    - name: Comment coverage
      uses: coroo/pytest-coverage-commentator@v1.0.2

  regression-tests:
    name: "Regression Tests"
    needs: [test]
    runs-on: ubuntu-latest

    steps:
      - run: echo OK
